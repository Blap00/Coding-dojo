package jsToJava;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class JavascriptI {	
	//EJERCICIO 1
	public static int[] print1To255() {
        ArrayList<Integer> newArr = new ArrayList<Integer>();
        for (int i = 1; i <= 255; i++) {
            newArr.add(i);
        }
        return newArr.stream().mapToInt(Integer::intValue).toArray();
        /*
 			
			newArr.stream(): Convierte el ArrayList en un flujo (Stream) de elementos. Un flujo es una 
			secuencia de elementos que se puede procesar de forma encadenada.

			mapToInt(Integer::intValue): Utiliza la función de mapeo mapToInt() para transformar cada 
			elemento del flujo en su representación entera. En este caso, se utiliza la referencia al 
			método Integer::intValue para obtener el valor entero de cada elemento.

			toArray(): Convierte el flujo de elementos en un array de enteros (int[]). El método 
			toArray() crea un nuevo array y coloca los elementos del flujo en ese array.
        */
    }
	//EJERCICIO 2
	public static int sumaParesHasta1000() {
        int suma = 0;
        for (int i = 1; i <= 1000; i++) {
            if (i % 2 == 0) {
                suma += i;
            }
        }
        return suma;
    }
	//EJERCICIO 3
    public static int sumaImparesHasta5000() {
        int suma = 0;
        for (int i = 1; i <= 5000; i++) {
            if (i % 2 != 0) {
                suma += i;
            }
        }
        return suma;
    }
    //EJERCICIO 4
    public static int sumaArray(int[] arr) {
        int suma = 0;
        for (int i = 0; i < arr.length; i++) {
            suma += arr[i];
        }
        return suma;
    }
    //EJERCICIO 6
    public static int encontrarMayor(int[] arr) {
        int max = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        return max;
    }
    //EJERCICIO 7
    public static double calcularPromedio(int[] arr) {
        int suma = 0;
        for (int i = 0; i < arr.length; i++) {
            suma += arr[i];
        }
        return (double) suma / arr.length;
    }
    //EJERCICIO 8
    public static int[] obtenerImparesHasta50() {
        List<Integer> impares = new ArrayList<>();
        for (int i = 1; i <= 50; i++) {
            if (i % 2 != 0) {
                impares.add(i);
            }
        }
        return convertIntegerListToArray(impares);
    }
    //EJERCICIO 9
    public static int contarMayoresQueY(int[] arr, int Y) {
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > Y) {
                count++;
            }
        }
        return count;
    }
    //EJERCICIO 10
    public static int[] cuadrados(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            arr[i] = arr[i] * arr[i];
        }
        return arr;
    }
    //EJERCICIO 11
    public static int[] reemplazarNegativosPorCero(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < 0) {
                arr[i] = 0;
            }
        }
        return arr;
    }
    //EJERCICIO 12
    public static double[] maxMinAvg(int[] arr) {
        int max = arr[0];
        int min = arr[0];
        int sum = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
            if (arr[i] < min) {
                min = arr[i];
            }
            sum += arr[i];
        }
        double average = (double) sum / arr.length;
        return new double[]{max, min, average};
    }
    //EJERCICIO 13
    public static int[] intercambiarValores(int[] arr) {
        int temp = arr[0];
        arr[0] = arr[arr.length - 1];
        arr[arr.length - 1] = temp;
        return arr;
    }
    //EJERCICIO 14
    public static String[] convertirNegativosADojo(int[] arr) {
        String[] result = new String[arr.length];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < 0) {
                result[i] = "Dojo";
            } else {
                result[i] = String.valueOf(arr[i]);
            }
        }
        return result;
    }
    //EJERCICIO 15
    private static int[] convertIntegerListToArray(List<Integer> list) {
        int[] arr = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            arr[i] = list.get(i);
        }
        return arr;
    }
    
    /*
    public static int[] negativoToZero(int[] arr){
            int[] newArr = new int[arr.length];
            for (int i = 0; i < arr.length; i++) {
            	if(arr[i]<0) {
            		newArr[i]= 0;
            	}else {
            		newArr[i]= arr[i];
            	}
            }
            return newArr ;       
    }
    */
    //
    public static void main(String[] args) {
        int[] numbers = {5, 9, 3, 7, 2, 1, 8, 6, 4};
        double[] resultmax = maxMinAvg(numbers);
        //int[] resultNT0 = negativoToZero(numbers);
        System.out.println("Imprimir del 1 al 255:");
        for (int value : print1To255()) {
            System.out.println(value);
        }
        System.out.println("__________________");
        System.out.println("Max: " + resultmax[0]);
        System.out.println("Min: " + resultmax[1]);
        System.out.println("Avg: " + resultmax[2]);
        System.out.println("__________________");
        /*
        System.out.println("Resultados de Negative To Zero: "+ Arrays.toString(resultNT0));
        System.out.println("__________________");
        */

        
        
    }
    
}
