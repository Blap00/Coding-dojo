package testingClass;
import java.util.Arrays;
import java.util.Random;

public class BasicJava {
    private int[] number;
    static Random ran = new Random();
    private String print255;
    private String oddNumbers;
    private int countGreater;
    private String squareValues;
    private String replaceNegatives;
    private int[] minMaxAverage;
    private int[] numberCopyI = this.number;
    private int[] numberCopyII = this.number;
    
    public BasicJava() {
        this.number = new int[0];
        this.numberCopyI=new int[0];
        this.numberCopyII=new int[0];
        this.print255 = print255();
        this.oddNumbers = oddNumbers();
        this.countGreater = countGreater(this.number);
        this.squareValues = squareValues(this.number);
        this.replaceNegatives =replaceNegatives(this.numberCopyI);
//        this.minMaxAverage = minMaxAverage(this.numberCopyII);
    }
    
    public String getPrint255() {
        return print255;
    }

    public void setPrint255(String print255) {
        this.print255 = print255;
    }

    public String getOddNumbers() {
        return oddNumbers;
    }

    public void setOddNumbers(String oddNumbers) {
        this.oddNumbers = oddNumbers;
    }

    public int getCountGreater() {
        return countGreater;
    }

    public void setCountGreater(int countGreater) {
        this.countGreater = countGreater;
    }
    
    public String getSquareValues() {
        return squareValues;
    }

    public void setSquareValues(String squareValues) {
        this.squareValues = squareValues;
    }

    public String getReplaceNegatives() {
		return replaceNegatives;
	}

	public void setReplaceNegatives(String replaceNegatives) {
		this.replaceNegatives = replaceNegatives;
	}
	
	

	public int[] getMinMaxAverage() {
		return minMaxAverage;
	}


	public void setMinMaxAverage(int[] minMaxAverage) {
		this.minMaxAverage = minMaxAverage;
	}


	public int[] getNumber() {
        return number;
    }
	
	

    public String getNumberCopyI() {
		return Arrays.toString(numberCopyI);
	}


	public void setNumberCopyI(int[] numberCopyI) {
		this.numberCopyI = numberCopyI;
	}


	public Class<? extends int[]> getNumberCopyII() {
		return numberCopyII.getClass();
//				Arrays.toString(numberCopyII);
	}


	public void setNumberCopyII(int[] numberCopyII) {
		this.numberCopyII = numberCopyII;
	}


	public void setNumber(int[] number) {
    	this.number = number != null ? number : new int[0];
    	this.numberCopyI = Arrays.copyOf(this.number, this.number.length);
    	this.numberCopyII = Arrays.copyOf(this.number, this.number.length);
        this.countGreater = countGreater(this.number);
        this.squareValues = squareValues(this.number);
        this.replaceNegatives = replaceNegatives(this.numberCopyI);
        this.minMaxAverage = minMaxAverage(this.numberCopyII);
    }

    private static String print255() {
        int[] arr = new int[256];
        for (int i = 1; i <= 255; i++) {
            arr[i] += i;
        }
        return Arrays.toString(arr);
    }

    private static String oddNumbers() {
        int[] arr = new int[255];
        int indice = 0;
        for (int valor = 1; valor <= 255; valor += 2) {
            arr[indice++] = valor;
        }
        return Arrays.toString(Arrays.copyOfRange(arr, 0, indice));
    }

    public static int countGreater(int[] arr) {
        int count = 0;
        int y = ran.nextInt(5);
        if (arr != null) {
            for (int num : arr) {
                if (num > y) {
                    count++;
                }
            }
        }
        return count;
    }

    public static String squareValues(int[] arr) {
        for (int index = 0; index < arr.length; index++) {
            arr[index] = arr[index] * arr[index];
        }
        return Arrays.toString(arr);
    }
    public static String replaceNegatives(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < 0) {
                arr[i] = 0;
            }
        }
        return Arrays.toString(arr);
    }
    public static int[] minMaxAverage(int[] arr) {
        int min = arr[0];
        int max = arr[0];
        int sum = arr[0];
        
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] < min) {
                min = arr[i];
            }
            if (arr[i] > max) {
                max = arr[i];
            }
            sum += arr[i];
        }
        
        int average = sum / arr.length;
        
        return new int[] { max, min, average };
    }
}